# -*- coding: utf-8 -*-
"""
@author: mjrobinson
"""

import numpy as np
import statsmodels.api as sm 



# define constants

ka = 6.7; #linspace(1,10,100)            
h  = 1.7 
n = 1        #slope exponent
m = 0.45
K = 0.00001  
zb = 0       #base level [m]
beta = K*ka**m 
hill=30 # constant relief generated by hill. magnitude of this does not affect slope of ridgeline 
xc = 30    # distance to channel head [m]
L = 10000  # mainstem river length [m]
U=0.5*(1/1000)  ## uplift rate [m yr-1]
a=((n-(h*m))/n) # alpha term in investigation
D=0.001 # diffusivity
tribg=0.7 # constants from Robinson and Scheingross 2024
tribb=0.34 # constants from Robinson and Scheingross 2024

crl=0.9
 # define model grids and time and check stability



dx = 1       #[m]

x = np.arange(xc,L+dx,dx)



# find first branch
branch=275#threshold of instability that causes branching # perron root of branching 

firstbranchpe=(branch*(D/K))**(1/(1+2*m))  #perron root of branching finding the area this branching occures and turning it into a mainstem length

#make arrays for trib length and spacing 
tribl=(())

    #%%
# this makes an array with the first branch and then the next tributary after that. 
trib_spacing=np.array((firstbranchpe,((L*(0.21*(firstbranchpe/L)**.6))+firstbranchpe)))
      
      
#%% # make a big array of tributary spacings that can be cut down later depending on mainstem length. 
# This stays the same. it does not vary with length or with uplift

while trib_spacing[-1]<100000:
        trib_spacing=np.append(trib_spacing,((L*(0.21*(trib_spacing[-1]/L)**.6))+trib_spacing[-1]))
#%%

#generate steady state river long profile for mainstem . 

zanalytical= zb +(U/beta)**(1/n)*(n/(n-(h*m)))*(L**((n-(h*m))/n)-x**((n-(h*m)/n)))  #a=((n-(h*m))/n)

# now cut down the tributary spacing to fit your mainstem length and detmine lengths for these tributaries. 

tribspacing=trib_spacing[trib_spacing<L]

tribl=L*(0.34*(tribspacing/L)**(.7))

# find the releif generated by each tributary. 
if len(trib_spacing)>0:
    # find the mainstem elevations at each tributary confluence. and tributary relief
    savemainstems=np.zeros(np.size(tribl))

    tribz=np.zeros(np.size(tribspacing))

   
    for i in range(np.size(tribl)):
        savemainstems[i]=zanalytical[x==int(tribspacing[i])]
        newx=np.arange(xc,int(tribl[i])+dx,dx)
        LL=tribl[i]

        if np.size(newx)==0:
            
            tribz[i]=0
            continue
 
        zanalyticalt= zb +(U/beta)**(1/n)*(n/(n-(h*m)))*(LL**((n-(h*m))/n)-newx**((n-(h*m)/n)))

    
        tribz[i]=np.max(zanalyticalt)


 
    zridge=savemainstems+tribz+hill # add mainstem and tributary relief together. the constant hillslpe relief can be added for plotting purposes but does not affect ridgeline slope 

 # find ridgeline slope using an ordinarly least squares regression
    ridgex=np.append(xc,tribspacing)
    x_model = sm.add_constant(ridgex)
    model = sm.OLS(np.append(zanalytical[0]+hill,zridge), x_model)
    results = model.fit()
    slope_linear_fit = results.params[1]

    
    
    
  
    # caculate slope as Eq15 or Eq. 26
    


    #eq 12
    slope =(U/(beta))**(1/n)*(1/(crl*(tribspacing[-1]-tribspacing[0])))*((tribb**a)*(L**(a*(1-tribg)))*(((((tribspacing[-1])**(a*tribg)))-(((tribspacing[0])**(a*tribg))))/a)+(((tribspacing[0])**(a)-(tribspacing[-1])**(a))/a))
   
    cgeom=(-1/(a*crl*((tribspacing[-1]/L)-(tribspacing[0]/L))))*(((tribspacing[0]/L)**a)-((tribspacing[-1]/L)**a)+((tribb**a)*((tribspacing[-1]/L))**(a*tribg))-((tribb**a)*((tribspacing[0]/L))**(a*tribg)))
    # eq 23
    slope=-1*((U/(K))**(1/n))*cgeom*( ka*(L)**h)**(-m/n)
  

